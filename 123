public class DoctorEditorPanel extends DoctorProfilePanel {
    private Doctor doctor; // Doctor being edited
    private JButton updateButton;

    public DoctorEditorPanel(CardLayout cardLayout, JPanel container, DoctorTableModel tableModel, Doctor doctor) {
        super(cardLayout, container, tableModel);
        this.doctor = doctor;
        populateFields(doctor);

        updateButton = new JButton("Update");
        updateButton.addActionListener(e -> updateDoctorProfile(tableModel));
        JPanel buttonPanel = (JPanel) this.getComponent(0); // Assuming buttons are in the first component
        buttonPanel.add(updateButton);
    }

    private void populateFields(Doctor doctor) {
        nameField.setText(doctor.getName());
        contactField.setText(doctor.getContact());
        emailField.setText(doctor.getEmail());
        addressField.setText(doctor.getAddress());
        qualificationField.setText(doctor.getQualification());
        departmentDropdown.setSelectedItem(doctor.getDepartment());
        specializationDropdown.setSelectedItem(doctor.getSpecialization());
        dobPicker.setDate(Date.from(doctor.getDob().atStartOfDay(ZoneId.systemDefault()).toInstant()));
        consultationFeeField.setText(String.valueOf(doctor.getConsultationFee()));
        // Populate available days
        for (JCheckBox checkBox : dayCheckBoxes) {
            checkBox.setSelected(doctor.getAvailableDays().contains(checkBox.getText()));
        }
        startTimeSpinner.setValue(new SimpleDateFormat("HH:mm").parse(doctor.getStartTime()));
        endTimeSpinner.setValue(new SimpleDateFormat("HH:mm").parse(doctor.getEndTime()));
    }

    private void updateDoctorProfile(DoctorTableModel tableModel) {
        saveDoctorProfile(tableModel);
        // Update the existing doctor in the list
        tableModel.updateDoctor(doctor);
        JOptionPane.showMessageDialog(this, "Doctor Profile Updated Successfully!");
    }
}
